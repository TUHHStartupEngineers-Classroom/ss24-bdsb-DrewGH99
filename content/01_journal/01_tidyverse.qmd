---
title: "Tidyverse"
author: "Joschka Schwarz/Drew Gilmore"
---

# Script for Challenges 1 & 2

```{r}
#| eval: false
#| output: true
#| message: false
#| warning: false
#| error: false

#Intro Challenge 1 ----

library(tidyverse)
library(here)
library("magrittr")
library(readxl)
library(readr)

#The following code up to line 68 comes from the content from 'intro to the tidyverse' material. 

bikes_tbl      <- read_excel(here("00_data/01_raw_data/01_bike_sales/01_raw_data/bikes.xlsx"), .name_repair = "unique_quiet")
orderlines_tbl <- read_excel(here("00_data/01_raw_data/01_bike_sales/01_raw_data/orderlines.xlsx"), .name_repair = "unique_quiet")
bikeshops_tbl  <- read_excel(here("00_data/01_raw_data/01_bike_sales/01_raw_data/bikeshops.xlsx"), .name_repair = "unique_quiet")

# Chaining commands with the pipe and assigning it to order_items_joined_tbl
bike_orderlines_joined_tbl <- orderlines_tbl %>%
  left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
  left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))

bike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%
  # 5.1 Separate category name
  separate(col    = category,
           into   = c("category.1", "category.2", "category.3"),
           sep    = " - ") %>%
  
  # 5.2 Add the total price (price * quantity) 
  # Add a column to a tibble that uses a formula-style calculation of other columns
  mutate(total.price = price * quantity) %>%
  
  # 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns
  # 5.3.1 by exact column name
  select(-...1, -gender) %>%
  
  # 5.3.2 by a pattern
  # You can use the select_helpers to define patterns. 
  # Type ?ends_with and click on Select helpers in the documentation
  select(-ends_with(".id")) %>%
  
  # 5.3.3 Actually we need the column "order.id". Let's bind it back to the data
  bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>% 
  
  # 5.3.4 You can reorder the data by selecting the columns in your desired order.
  # You can use select_helpers like contains() or everything()
  select(order.id, contains("order"), contains("model"), contains("category"),
         price, quantity, total.price,
         everything()) %>%
  
  # 5.4 Rename columns because we actually wanted underscores instead of the dots
  # (one at the time vs. multiple at once)
  rename(bikeshop = name) %>%
  set_names(names(.) %>% str_replace_all("\\.", "_"))



#create variable for table
sales_by_location_tbl <- bike_orderlines_wrangled_tbl %>%
  
  # separate state and city variables into different columns
  separate(col   = location,
           into  = c("city", "state"),
           sep   = ", ") %>%
 
  #select columns
  select(state, city, total_price) %>%
  
  #Group data by state and sum price data into the 'sales' variable
    group_by(state) %>% 
      summarize(sales = sum(total_price)) %>%

  
#add column that formats sales data as a currency
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                   decimal.mark = ",", 
                                   prefix = "", 
                                   suffix = " €"))%>% 


  #Create canvas with x-axis and y-axis values
  ggplot(aes(x = state, y = sales)) +
  
  #Create bar plot with color fill
  geom_col(fill = "#9EB6F3") + 
  
  #Add labels to bars
  geom_label(aes(label = sales_text)) + 
  
  #Scale y-axis
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  
  #Modify labels and plot title
  labs(
    title    = "Revenue by Location",
    subtitle = "",
    x = "State", 
    y = "Revenue"
  ) +

  #rotate axis labels
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

#intro challenge 2 ----

#create variable for table
sales_by_location_and_year_tbl <- bike_orderlines_wrangled_tbl %>%
  
  # separate state and city
  separate(col   = location,
           into  = c("city", "state"),
           sep   = ", ") %>%
  
  select(state, city, total_price, order_date) %>% ##select columns
  mutate(year = year(order_date)) %>% #add column for the year that takes the year value from the order date
  group_by(year, state) %>% #group by year and state
  summarize(sales = sum(total_price), .groups = 'drop') %>% #sum sales for each year and state
  ungroup() %>% #ungroup

    mutate(sales_text = scales::dollar(sales, big.mark = ".", #add column that formats sales data as a currency
                                       decimal.mark = ",", 
                                       prefix = "", 
                                       suffix = " €")) %>%
  
  ggplot(aes(x = year, y = sales, fill = state)) + #Create canvas with x-axis, y-axis, and fill values
  
  geom_col() + #create bar plot
  
  geom_smooth(method = "lm", se = FALSE) + # Add a trendline
  
  facet_wrap(~ state) + #use face wrap to display multiple plots based on state
  
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".",    ##Scale y-axis
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title = "Sales by year and location",
    subtitle = "",
    fill = "Location"
  )

```

## Challenge 1 Result
```{r plot, fig.width=10, fig.height=7}  
#| echo: true 
sales_by_location_tbl
```

## Challenge 2 Result

The state with the highest revenue is North Rhine-Westphalia.

```{r plot2, fig.width=10, fig.height=7}
#| echo: true
#| message: false
#| warning: false
sales_by_location_and_year_tbl
```


::: callout-note
You can delete everything in here and start fresh.
:::

This is a `.qmd` file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a \# in front of your text, it will create a top level-header.

To learn more about Quarto websites visit <https://quarto.org/docs/websites>.

# Text Formatting

*italics* and **bold**

superscript^2^ / subscript~2~

~~strikethrough~~

`verbatim code`

> Blockquote

# Headings

## Header 2
### Header 3
#### Header 4
##### Header 5
###### Header 6

# Links & Images

<https://quarto.org>

[Quarto](https://quarto.org)

![Caption](../../assets/img/elephant.png)

[![Caption](../../assets/img/elephant.png)](https://quarto.org)

[![Caption](../../assets/img/elephant.png)](https://quarto.org "An elephant")


# Lists

* unordered list
    + sub-item 1
    + sub-item 2
        - sub-sub-item 1
        
*   item 2

    Continued (indent 4 spaces)
    
    
1. ordered list
2. item 2
    i) sub-item 1
         A.  sub-sub-item 1
         
(@)  A list whose numbering

continues after

(@)  an interruption

# Tables

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |

# Source Code

Use ``` to delimit blocks of source code:

```
code
```

Add a language to syntax highlight code blocks:

```{r}
1 + 1
```

```{r}
cars
```

```{r}
plot(cars)
```
